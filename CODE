<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic-Tac-Toe Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #74ebd5, #ACB6E5);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .container {
      text-align: center;
    }

    h1 {
      margin-bottom: 20px;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
      justify-content: center;
    }

    .cell {
      width: 100px;
      height: 100px;
      background-color: white;
      font-size: 48px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      transition: background-color 0.3s;
    }

    .cell:hover {
      background-color: #f0f0f0;
    }

    #message {
      font-size: 20px;
      margin: 15px 0;
    }

    #resetBtn {
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      background-color: #007bff;
      color: white;
      border-radius: 6px;
      cursor: pointer;
      margin-top: 10px;
    }

    #resetBtn:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Tic-Tac-Toe</h1>
    <div class="board" id="board">
      <!-- 9 cells dynamically generated by JS -->
    </div>
    <div id="message"></div>
    <button id="resetBtn">Restart Game</button>
  </div>

  <script>
    const board = document.getElementById('board');
    const message = document.getElementById('message');
    const resetBtn = document.getElementById('resetBtn');

    let currentPlayer = 'X';
    let gameActive = true;
    let gameState = ["", "", "", "", "", "", "", "", ""];

    const winningCombinations = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
      [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
      [0, 4, 8], [2, 4, 6]             // diagonals
    ];

    function handleCellClick(e) {
      const index = parseInt(e.target.getAttribute('data-index'));

      if (gameState[index] !== "" || !gameActive) return;

      gameState[index] = currentPlayer;
      e.target.textContent = currentPlayer;

      if (checkWinner()) {
        message.textContent = `Player ${currentPlayer} wins!`;
        gameActive = false;
        return;
      }

      if (!gameState.includes("")) {
        message.textContent = "It's a draw!";
        gameActive = false;
        return;
      }

      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      message.textContent = `Player ${currentPlayer}'s turn`;
    }

    function checkWinner() {
      return winningCombinations.some(combination => {
        return combination.every(index => gameState[index] === currentPlayer);
      });
    }

    function createBoard() {
      board.innerHTML = "";
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.setAttribute('data-index', i);
        cell.addEventListener('click', handleCellClick);
        board.appendChild(cell);
      }
      message.textContent = `Player ${currentPlayer}'s turn`;
    }

    function resetGame() {
      gameState = ["", "", "", "", "", "", "", "", ""];
      currentPlayer = 'X';
      gameActive = true;
      createBoard();
    }

    resetBtn.addEventListener('click', resetGame);
    createBoard();
  </script>
</body>
</html>
